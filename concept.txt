call -> normal
restore method handle
restore code only for interrupts
what about restore code for run()? helper method calls real run()?

generate method handles
remember method handles during serialize

test
-------------------------------------------------------------------------------

SFE new:
--------

run:
- restore code dispatcher just for run
- not run: store last frame in local, call method handle of last frame
- while not serializing: local last frame--, call method handle of last frame

copy:
- restore code dispatcher which just restores the frame and jumps after interrupt/method call
- static field with same name with (unbound) method handle

interrupt:
- set last frame

method:
- same as frequent3

-------------------------------------------------------------------------------

SFE:
----

run:
- normal start vs.
- method handle call of last interrupt
- returned: new call, if no capture
- capture code
- replace returns with exception

abstract:
- signature + thread & (previous) frame

abstract copy:
- signature + thread & (previous) frame, no return value, private

concrete:
- signature + thread & (previous) frame
- init code, calculate current frame
- no restore code
- interrupt, capture top most frame
- capture code

concrete copy:
- signature == thread & (previous) frame, no return value
- init code, calculate current frame
- restore code only for interrupt
- interrupt, capture top most frame
- capture code: end of capture (because directly called by run())
- capture return value into frame at original exit points

-------------------------------------------------------------------------------

Ideas:
------

@RestorePoint?

-------------------------------------------------------------------------------

entered method / no capture:
  remember level in local
  level++
  normal

entered method / capture:
  remember level in local
  level++
  dispatcher
    dummy args
    enter interrupted method (direct call)                 | avoids restore of complete stack
    jump after normal method call (to "leave method" code) |
    PROBLEM: stack mismatch: special restore code or restore frame before method call

interrupt:
  capture frame
  set level to have being captured
  set capture

interrupt end:
  reset capture
  set level to have not being captured
  restore frame

left method / no capture:
  level--,
  set level to have not being captured
  restore frame

left method / capture:
  level--
  if level not captured
    capture frame
    set level to have being captured
  return

catch block:
  reset context to remembered level
  restore frame
  normal
